@using TradeBot.Account.AccountService.v1;
@using Website.Controllers.Clients;

<!--Если в аккаунте есть биржи, они перебираются и выводятся в виде карточек.-->
@if (AccountData.Exchanges.Count > 0)
{
    <div class="exchange_cards_container">
        @foreach (var exchange in AccountData.Exchanges)
        {
            <!--Карточка биржи.-->
            <div class="exchange_card">
                <div>
                    <h2>@exchange.Name</h2>
                    <p>Токен: @exchange.Token</p>
                    <p>Секрет: @exchange.Secret</p>
                </div>
                <!--Кнопка удаления биржи, использующая Blazor для удаления без перезагрузки страницы.-->
                <input class="button exchange_card_delete_button" type="button" name="DeleteButton" @onclick="() => DeleteExchange(exchange.Code)" value="УДАЛИТЬ" />
            </div>
        }
    </div>
}
else { <p>Биржи отсутствуют.</p> }

@code {
    // Параметры, передающиеся в компонент из представления.
    [Parameter] public Models.AccountDataModel AccountData { get; set; }
    [Parameter] public string SessionId { get; set; }
    // Удаляет биржу и обновляет данные.
    private async void DeleteExchange(ExchangeAccessCode code)
    {
        await ExchangeAccessClient.DeleteExchangeAccess(SessionId, code);
        RefreshExchanges();
    }
    // Метод обновления данных о биржах.
    private async void RefreshExchanges()
    {
        var exchanges = await ExchangeAccessClient.AllExchangesBySession(SessionId);
        AccountData.Exchanges = exchanges.Exchanges;
        await InvokeAsync(StateHasChanged);
    }
}