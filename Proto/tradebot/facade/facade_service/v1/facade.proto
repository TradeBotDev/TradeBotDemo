syntax = "proto3";
option csharp_namespace = "TradeBot.Facade.FacadeService.v1";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

import "tradebot/common/v1/common.proto";
package tradebot.facade.facade_service.v1;

service FacadeService{
	/*
		Подписка на изменение баланса пользователя (ЕДИНСТВЕННОГО)
	*/
	rpc SubscribeBalance(SubscribeBalanceRequest) returns (stream SubscribeBalanceResponse);
	/*
		Аутентификция на бирже по токену
	*/
	rpc AuthenticateToken(AuthenticateTokenRequest) returns (AuthenticateTokenResponse);
	/*
		Список доступных слотов на бирже
	*/
	rpc Slots(SlotsRequest) returns (stream SlotsResponse);
	/*
		Клиент говорит обновиться серверу
	*/
	rpc UpdateServerConfig (UpdateServerConfigRequest) returns (UpdateServerConfigResponse);
	/*
		Подписка на логи нужного сервиса
	*/
	//TODO в каждом сервисе нужно написать 
	rpc SubscribeLogsTM(SubscribeLogsRequest) returns (stream SubscribeLogsResponse);
	/*
		Подписка на логи релэя
	*/
	rpc SubscribeLogsRelay(SubscribeLogsRequest) returns (stream SubscribeLogsResponse);

	rpc StartBot (SwitchBotRequest) returns (SwitchBotResponse);

	rpc StopBot (StopBotRequest) returns (StopBotResponse);

	rpc DeleteOrder(DeleteOrderRequest) returns (DeleteOrderResponse);
	
	// Метод входа в аккаунт
	rpc Login (LoginRequest) returns (LoginResponse);
	// Метод выхода из аккаунта
	rpc Logout (LogoutRequest) returns (LogoutResponse);
	// Метод регистрации аккаунта
	rpc Register (RegisterRequest) returns (RegisterResponse);
	// Проверка текущего пользователя на валидность по Id сессии
	rpc IsValidSession (IsValidSessionRequest) returns (IsValidSessionResponse);
	// Получение данных текущего пользователя
	rpc AccountData (AccountDataRequest) returns (AccountDataResponse);
	// Добавление новой биржи для текущего пользователя
	rpc AddExchangeAccess(AddExchangeAccessRequest) returns (AddExchangeAccessResponse);
	// Получение массива бирж текущего пользователя.
	rpc AllExchangesBySession (AllExchangesBySessionRequest) returns (AllExchangesBySessionResponse);
	// Удаление информации о доступе к бирже по ее коду и id сессии.
	rpc DeleteExchangeAccess (DeleteExchangeAccessRequest) returns (DeleteExchangeAccessResponse);
	// Получение информации о доступе текущего пользователя к бирже.
	rpc ExchangeBySession (ExchangeBySessionRequest) returns (ExchangeBySessionResponse);
	// Sub history
	rpc SubscribeEvents(SubscribeEventsRequest) returns (stream SubscribeEventsResponse);
	// Метод для сайта. Позволяет добавить лицензию в аккаунт при покупке продукта.
	rpc SetLicense (SetLicenseRequest) returns (SetLicenseResponse);
	// Метод для сервиса Account. Позволяет проверить, есть ли лицензия на продукт для данного аккаунта.
	rpc CheckLicense (CheckLicenseRequest) returns (CheckLicenseResponse);
	
}
// Запрос на установку лицензии.
message SetLicenseRequest {
	string session_id = 1;
	ProductCode product = 2;
	string card_number = 3;
	int32 date = 4;
	int32 cvv = 5;
}

// Ответ на запрос об установке лицензии.
message SetLicenseResponse {
	LicenseCode code = 1;
	string message = 2;
}

// Запрос на проверку лицензии.
message CheckLicenseRequest {
	string session_id = 1;
	ProductCode product = 2;
}

// Ответ на запрос о проверке лицензии.
message CheckLicenseResponse {
	LicenseCode code = 1;
	string message = 2;
	bool have_access = 3;
}

// Коды действий с лицензией.
enum LicenseCode {
	LICENSE_CODE_UNSPECIFIED = 0;
	LICENSE_CODE_SUCCESSFUL = 1;
	LICENSE_CODE_IS_EXISTS = 2;
	LICENSE_CODE_HAVE_ACCESS = 3;
	LICENSE_CODE_NO_ACCESS = 4;
}

// Коды продуктов для лицензий.
enum ProductCode {
	PRODUCT_CODE_UNSPECIFIED = 0;
	PRODUCT_CODE_TRADEBOT = 1;
}

// Request get user data.
message AccountDataRequest {
	string session_id = 1;
}

// Response user data.
message AccountDataResponse {
	AccountActionCode result = 1;
	string message = 2;
	AccountInfo current_account = 3;
}

message SubscribeEventsRequest {
	string sessionid = 1;
}

message SubscribeEventsResponse{
	oneof event_type{
		PublishBalanceEvent balance = 1;
		PublishOrderEvent order = 2;
	}
}

message PublishBalanceEvent{
	google.protobuf.Timestamp time = 1;
	tradebot.common.v1.Balance balance = 2;
	string sessionid = 3;
	string slot = 4;
}

message PublishOrderEvent{
	tradebot.common.v1.ChangesType changes_type = 1;
	google.protobuf.Timestamp time = 2;
	tradebot.common.v1.Order order = 3;
	string message = 4;
	string sessionid = 5;
	string slot = 6;
}
message DeleteOrderRequest{
	google.protobuf.Empty empty = 1;
}

message StopBotRequest{
	tradebot.common.v1.UpdateServerConfigRequest request = 1;
}

message StopBotResponse{}

message DeleteOrderResponse{
	tradebot.common.v1.DefaultResponse response = 1;
}
// Данные для входа в аккаунт.
message LoginRequest {
	string email = 1;
	string password = 2;
}

// Ответ на запрос о входе в аккаунт.
message LoginResponse {
	AccountActionCode result = 1;
	string message = 2;
	string session_id = 3;
	int32 account_id = 4;
}

// Запрос на выход из аккаунта.
message LogoutRequest {
	string session_id = 1;
	bool save_exchange_accesses = 2;
}

// Ответ на запрос о выходе из аккаунта.
message LogoutResponse {
	AccountActionCode result = 1;
	string message = 2;
}

// Данные для регистрации аккаунта.
message RegisterRequest {
	string email = 1;
	string password = 2;
	string verify_password = 3;
}

// Ответ на запрос о регистрации аккаунта.
message RegisterResponse {
	AccountActionCode result = 1;
	string message = 2;
}

// Запрос на проверку сессии на валидность.
message IsValidSessionRequest {
	string session_id = 1;
}

// Результат проверки сессии на валидность.
message IsValidSessionResponse {
	bool is_valid = 1;
	string message = 2;
}

//Информация о пользователе, необходимая для отображения в UI.
message AccountInfo {
	int32 account_id = 1;
	string email = 2;
	repeated ExchangeAccessInfo exchanges = 3;
}

// Информация о данных для доступа к бирже.
message ExchangeAccessInfo {
	int32 exchange_access_id = 1;
	ExchangeAccessCode code = 2;
	string name = 3;
	string token = 4;
	string secret = 5;
}

// Коды с результатом действия с аккаунтами.
enum AccountActionCode {
	ACCOUNT_ACTION_CODE_UNSPECIFIED = 0;
	ACCOUNT_ACTION_CODE_SUCCESSFUL = 1;
	ACCOUNT_ACTION_CODE_FAILED = 2;
	ACCOUNT_ACTION_CODE_IS_NOT_FOUND = 3;
	ACCOUNT_ACTION_CODE_IS_EXISTS = 4;
	ACCOUNT_ACTION_CODE_TIME_PASSED = 5;
}

// Коды результата выполнения входа или регистрации.
enum ActionCode {
	/*
	* 0 - успешное выполнение,
	* 1 - пользователь не найден,
	* 2 - пользователь уже существует,
	* 3 - имеется пустое поле ввода,
	* 4 - пароли не совпадают,
	* 5 - поле не является электронной почтой,
	* 6 - биржа не найдена,
	* 7 - биржа уже существует.
	*/
	ACTION_CODE_SUCCESSFUL = 0;
	ACTION_CODE_ACCOUNT_NOT_FOUND = 1;
	ACTION_CODE_ACCOUNT_EXISTS = 2;
	ACTION_CODE_EMPTY_FIELD = 3;
	ACTION_CODE_PASSWORD_MISMATCH = 4;
	ACTION_CODE_IS_NOT_EMAIL = 5;
	ACTION_CODE_EXCHANGE_NOT_FOUND = 6;
	ACTION_CODE_EXCHANGE_EXISTS = 7;
}
// Запрос на добавление биржи для текущего пользователя.
message AddExchangeAccessRequest {
	string session_id = 1;
	ExchangeAccessCode code = 2;
	string exchange_name = 3;
	string token = 4;
	string secret = 5;
}

// Ответ на добавление биржи для текущего пользователя.
message AddExchangeAccessResponse {
	ExchangeAccessActionCode result = 1;
	string message = 2;
}

// Запрос на получение информации о всех биржах пользователя.
message AllExchangesBySessionRequest {
	string session_id = 1;
}

// Получение всех добавленных бирж текущего пользователя.
message AllExchangesBySessionResponse {
	ExchangeAccessActionCode result = 1;
	string message = 2;
	repeated ExchangeAccessInfo exchanges = 3;
}

// Запрос на удаление записи о конкретной бирже для текущего пользователя.
message DeleteExchangeAccessRequest {
	string session_id = 1;
	ExchangeAccessCode code = 2;
}

// Ответ на запрос об удалении записи о бирже для текущего пользователя.
message DeleteExchangeAccessResponse {
	ExchangeAccessActionCode result = 1;
	string message = 2;
}

// Запрос на получение информации о доступе пользователя к конкретной бирже.
message ExchangeBySessionRequest {
	string session_id = 1;
	ExchangeAccessCode code = 2;
}

// Ответ на запрос с получением информации о доступе пользователя к конкретной бирже.
message ExchangeBySessionResponse {
	ExchangeAccessActionCode result = 1;
	string message = 2;
	ExchangeAccessInfo exchange = 3;
}

// Коды с результатом действия с биржами.
enum ExchangeAccessActionCode {
	EXCHANGE_ACCESS_ACTION_CODE_UNSPECIFIED = 0;
	EXCHANGE_ACCESS_ACTION_CODE_SUCCESSFUL = 1;
	EXCHANGE_ACCESS_ACTION_CODE_FAILED = 2;
	EXCHANGE_ACCESS_ACTION_CODE_IS_NOT_FOUND = 3;
	EXCHANGE_ACCESS_ACTION_CODE_ACCOUNT_NOT_FOUND = 4;
	EXCHANGE_ACCESS_ACTION_CODE_IS_EXISTS = 5;
	EXCHANGE_ACCESS_ACTION_CODE_TIME_PASSED = 6;
}

message SwitchBotRequest {
	tradebot.common.v1.Config config = 1;
}

message SwitchBotResponse {
	tradebot.common.v1.DefaultResponse response = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}

message SubscribeLogsRequest{
	tradebot.common.v1.SubscribeLogsRequest r = 1;
}

message SubscribeLogsResponse{
	tradebot.common.v1.SubscribeLogsResponse response = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}

message UpdateServerConfigRequest{
	tradebot.common.v1.UpdateServerConfigRequest request = 1;
}

message UpdateServerConfigResponse{
	tradebot.common.v1.UpdateServerConfigResponse response = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}

message SubscribeBalanceRequest{
	tradebot.common.v1.SubscribeBalanceRequest request = 1;
	string slot_name = 2;
}

message SubscribeBalanceResponse{
	//old version - tradebot.common.v1.SubscribeBalanceResponse response = 1;
	optional tradebot.common.v1.Balance Money = 1;
}

message SlotsRequest{
	//TODO Тут должно быть обращение к конкретной бирже, но она пока одна
	google.protobuf.Empty empty = 1;
}
message SlotsResponse{
	string slot_name = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}

message AuthenticateTokenRequest{
	string token = 1;
}

message AuthenticateTokenResponse{
	tradebot.common.v1.DefaultResponse response = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}
// Коды всех бирж.
enum ExchangeAccessCode {
	EXCHANGE_ACCESS_CODE_UNSPECIFIED = 0;
	EXCHANGE_ACCESS_CODE_BITMEX = 1;
}