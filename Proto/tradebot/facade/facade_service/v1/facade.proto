syntax = "proto3";
option csharp_namespace = "TradeBot.Facade.FacadeService.v1";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

import "tradebot/common/v1/common.proto";
package tradebot.facade.facade_service.v1;

service FacadeService{
	/*
		Подписка на изменение баланса пользователя (ЕДИНСТВЕННОГО)
	*/
	rpc SubscribeBalance(SubscribeBalanceRequest) returns (stream SubscribeBalanceResponse);

	/*
		Аутентификция на бирже по токену
	*/
	rpc AuthenticateToken(AuthenticateTokenRequest) returns (AuthenticateTokenResponse);

	/*
		Список доступных слотов на бирже
	*/
	rpc Slots(SlotsRequest) returns (stream SlotsResponse);

	/*
		Клиент говорит обновиться серверу
	*/
	rpc UpdateServerConfig (UpdateServerConfigRequest) returns (UpdateServerConfigResponse);

	/*
		Подписка на логи нужного сервиса
	*/
	//TODO в каждом сервисе нужно написать 
	rpc SubscribeLogsTM(SubscribeLogsRequest) returns (stream SubscribeLogsResponse);

	/*
		Подписка на логи релэя
	*/
	rpc SubscribeLogsRelay(SubscribeLogsRequest) returns (stream SubscribeLogsResponse);

	/*
		 бота
	*/
	rpc SwitchBot (SwitchBotRequest) returns (SwitchBotResponse);

	// Метод входа в аккаунт
	rpc Login (LoginRequest) returns (LoginReply);
	// Метод выхода из аккаунта
	rpc Logout (SessionRequest) returns (LogoutReply);
	// Метод регистрации аккаунта
	rpc Register (RegisterRequest) returns (RegisterReply);
	// Проверка текущего пользователя на валидность по Id сессии
	rpc IsValidSession (SessionRequest) returns (SessionReply);
	// Получение данных текущего пользователя
	rpc CurrentAccountData (SessionRequest) returns (CurrentAccountReply);
	// Добавление новой биржи для текущего пользователя
	rpc AddExchangeAccess(AddExchangeAccessRequest) returns (AddExchangeAccessReply);
	// Получение массива бирж текущего пользователя
	rpc AllExchangesBySession (SessionRequest) returns (AllExchangesBySessionReply);
	// Удаление информации о доступе к бирже по id в базе данных (пока что)
	rpc DeleteExchangeAccess (DeleteExchangeAccessRequest) returns (DeleteExchangeAccessReply);
	// Получение информации о доступе текущего пользователя к бирже
	rpc ExchangeBySession (ExchangeBySessionRequest) returns (ExchangeBySessionReply);
}
// Данные для входа в аккаунт.
message LoginRequest {
	string email = 1;
	bool save_exchanges_after_logout = 2;
	string password = 3;
}

// Ответ на запрос о входе в аккаунт.
message LoginReply {
	ActionCode result = 1;
	string message = 2;
	string session_id = 3;
}

// Ответ на запрос о выходе из аккаунта
message LogoutReply {
	ActionCode result = 1;
	string message = 2;
}

// Данные для регистрации аккаунта.
message RegisterRequest {
	string email = 1;
	string firstname = 2;
	string lastname = 3;
	string phone_number = 4;
	string password = 5;
	string verify_password = 6;
}

// Ответ на запрос о регистрации аккаунта.
message RegisterReply {
	ActionCode result = 1;
	string message = 2;
}

// Запрос на передачу сессии.
message SessionRequest {
	string session_id = 1;
}

// Результат проверки сессии на валидность.
message SessionReply {
	bool is_valid = 1;
	string message = 2;
}

// Получение данных текущего пользователя.
message CurrentAccountReply {
	ActionCode result = 1;
	string message = 2;
	AccountInfo current_account = 3;
}

//Информация о пользователе, необходимая для отображения в UI
message AccountInfo {
	int32 account_id = 1;
	string firstname = 2;
	string lastname = 3;
	string email = 4;
	string phone_number = 5;
	repeated ExchangeAccessInfo exchanges = 6;
}

// Информация о данных для доступа к бирже.
message ExchangeAccessInfo {
	int32 exchange_access_id = 1;
	ExchangeCode code = 2;
	string name = 3;
	string token = 4;
	string secret = 5;
}

// Коды всех бирж.
enum ExchangeCode {
	EXCHANGE_CODE_BITMEX = 0;
}

// Коды результата выполнения входа или регистрации.
enum ActionCode {
	/*
	* 0 - успешное выполнение,
	* 1 - пользователь не найден,
	* 2 - пользователь уже существует,
	* 3 - имеется пустое поле ввода,
	* 4 - пароли не совпадают,
	* 5 - поле не является электронной почтой,
	* 6 - биржа не найдена,
	* 7 - биржа уже существует.
	*/
	ACTION_CODE_SUCCESSFUL = 0;
	ACTION_CODE_ACCOUNT_NOT_FOUND = 1;
	ACTION_CODE_ACCOUNT_EXISTS = 2;
	ACTION_CODE_EMPTY_FIELD = 3;
	ACTION_CODE_PASSWORD_MISMATCH = 4;
	ACTION_CODE_IS_NOT_EMAIL = 5;
	ACTION_CODE_EXCHANGE_NOT_FOUND = 6;
	ACTION_CODE_EXCHANGE_EXISTS = 7;
}
// Запрос на добавление биржи для текущего пользователя.
message AddExchangeAccessRequest {
	string session_id = 1;
	ExchangeCode code = 2;
	string exchange_name = 3;
	string token = 4;
	string secret = 5;
}

// Ответ на добавление биржи для текущего пользователя.
message AddExchangeAccessReply {
	ActionCode result = 1;
	string message = 2;
}

// Получение всех добавленных бирж текущего пользователя.
message AllExchangesBySessionReply {
	ActionCode result = 1;
	string message = 2;
	repeated ExchangeAccessInfo exchanges = 3;
}

// Запрос на удаление записи о конкретной бирже для текущего пользователя.
message DeleteExchangeAccessRequest {
	string session_id = 1;
	ExchangeCode code = 2;
}

// Ответ на запрос об удалении записи о бирже для текущего пользователя.
message DeleteExchangeAccessReply {
	ActionCode result = 1;
	string message = 2;
}

// Запрос на получение информации о доступе пользователя к конкретной бирже.
message ExchangeBySessionRequest {
	string session_id = 1;
	ExchangeCode code = 2;
}

// Ответ на запрос с получением информации о доступе пользователя к конкретной бирже.
message ExchangeBySessionReply {
	ActionCode result = 1;
	string message = 2;
	ExchangeAccessInfo exchange = 3;
}

message SwitchBotRequest {
	tradebot.common.v1.Config config = 1;
}

message SwitchBotResponse {
	tradebot.common.v1.DefaultResponse response = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}

message SubscribeLogsRequest{
	tradebot.common.v1.SubscribeLogsRequest r = 1;
}

message SubscribeLogsResponse{
	tradebot.common.v1.SubscribeLogsResponse response = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}

message UpdateServerConfigRequest{
	tradebot.common.v1.UpdateServerConfigRequest request = 1;
}

message UpdateServerConfigResponse{
	tradebot.common.v1.UpdateServerConfigResponse response = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}

message SubscribeBalanceRequest{
	tradebot.common.v1.SubscribeBalanceRequest request = 1;
	string slot_name = 2;
}

message SubscribeBalanceResponse{
	//old version - tradebot.common.v1.SubscribeBalanceResponse response = 1;
	optional tradebot.common.v1.Balance Money = 1;
}

message SlotsRequest{
	//TODO Тут должно быть обращение к конкретной бирже, но она пока одна
	google.protobuf.Empty empty = 1;
}
message SlotsResponse{
	string slot_name = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}

message AuthenticateTokenRequest{
	string token = 1;
}

message AuthenticateTokenResponse{
	tradebot.common.v1.DefaultResponse response = 1;
	tradebot.common.v1.DefaultResponse message = 2;
}
