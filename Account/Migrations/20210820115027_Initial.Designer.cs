// <auto-generated />
using System;
using AccountGRPC.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Account.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20210820115027_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AccountGRPC.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AccountGRPC.Models.ExchangeAccess", b =>
                {
                    b.Property<int>("ExchangeAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("ExchangeAccessId");

                    b.HasIndex("AccountId");

                    b.ToTable("ExchangeAccesses");
                });

            modelBuilder.Entity("AccountGRPC.Models.License", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("Product")
                        .HasColumnType("integer");

                    b.HasKey("LicenseId");

                    b.HasIndex("AccountId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("AccountGRPC.Models.LoggedAccount", b =>
                {
                    b.Property<int>("LoggedAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.HasKey("LoggedAccountId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("LoggedAccounts");
                });

            modelBuilder.Entity("AccountGRPC.Models.ExchangeAccess", b =>
                {
                    b.HasOne("AccountGRPC.Models.Account", "Account")
                        .WithMany("ExchangeAccesses")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountGRPC.Models.License", b =>
                {
                    b.HasOne("AccountGRPC.Models.Account", "Account")
                        .WithMany("Licenses")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountGRPC.Models.LoggedAccount", b =>
                {
                    b.HasOne("AccountGRPC.Models.Account", "Account")
                        .WithOne("LoggedAccount")
                        .HasForeignKey("AccountGRPC.Models.LoggedAccount", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountGRPC.Models.Account", b =>
                {
                    b.Navigation("ExchangeAccesses");

                    b.Navigation("Licenses");

                    b.Navigation("LoggedAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
